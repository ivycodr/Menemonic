package com.mnemonic.service;

import java.util.List;
import java.util.Optional;
import java.util.StringTokenizer;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

import com.mnemonic.entity.Category;
import com.mnemonic.entity.Phrase;
import com.mnemonic.respositories.MNemonicRepository;


@Component
public class MnemonicService {
	
	@Autowired
	private MNemonicRepository  mnemonicRepository;
	
	
	public Optional<Phrase> findById(long id) {
		return  mnemonicRepository.findById(id);

	}
	
	public List<Phrase> getAllPhrases() {
		return mnemonicRepository.findAll();
	}
	
	public List<Phrase> getPhrasesByCategory(Long categoryID) {
		return mnemonicRepository.findByCategoryId(categoryID);
	}
	
	public Phrase createPhrase(Phrase phrase) {
		
		// calculate score and password
		StringTokenizer st = new StringTokenizer(phrase.getMnemonic());
		String password = new String();
		while (st.hasMoreTokens()) {
	         password = password + st.nextToken().charAt(0);
			
	     }
		 phrase.setPassword(password);
		 
		 int passwordLength = password.length();
		 int score = (int) Math.log10((Math.pow(passwordLength, passwordLength)));
		 
		
	    Phrase ph  = mnemonicRepository.save(phrase);
		return ph;
	}
	
	
	
	

	

}
